-- File: ~/.config/nvim/lua/plugins/treesitter.lua
-- Last Change: Mon, Jan 2024/01/29 - 17:04:03

return {
  "nvim-treesitter/nvim-treesitter",
	enabled = false,
  version = false,
  build = ":TSUpdate",
  -- event = { "VeryLazy" },
  event = { "BufReadPre", "BufNewFile" },
  init = function(plugin)
    -- PERF: add nvim-treesitter queries to the rtp and it's custom query
    -- predicates early This is needed because a bunch of plugins no longer
    -- `require("nvim-treesitter")`, which no longer trigger the
    -- **nvim-treeitter** module to be loaded in time. Luckily, the only thins
    -- that those plugins need are the custom queries, which we make available
    -- during startup.

    require("lazy.core.loader").add_to_rtp(plugin)
    require("nvim-treesitter.query_predicates")
  end,
  dependencies = {
    {
      "nvim-treesitter/nvim-treesitter-textobjects",
      lazy = true,
      config = function()
        -- When in diff mode, we want to use the default
        -- vim text objects c & C instead of the treesitter ones.
        local move = require("nvim-treesitter.textobjects.move") ---@type table<string,fun(...)>
        local configs = require("nvim-treesitter.configs")
        for name, fn in pairs(move) do
          if name:find("goto") == 1 then
            move[name] = function(q, ...)
              if vim.wo.diff then
                local config = configs.get_module("textobjects.move")[name] ---@type table<string,string>
                for key, query in pairs(config or {}) do
                  if q == query and key:find("[%]%[][cC]") then
                    vim.cmd("normal! " .. key)
                    return
                  end
                end
              end
              return fn(q, ...)
            end
          end
        end

        local ts_repeat_move = require("nvim-treesitter.textobjects.repeatable_move")

        -- Disabled because I use improved-ft
        -- -- vim way: ; goes to the direction you were moving.
        -- vim.keymap.set({ "n", "x", "o" }, ";", ts_repeat_move.repeat_last_move)
        -- vim.keymap.set({ "n", "x", "o" }, ",", ts_repeat_move.repeat_last_move_opposite)

        -- -- Optionally, make builtin f, F, t, T also repeatable with ; and ,
        -- vim.keymap.set({ "n", "x", "o" }, "f", ts_repeat_move.builtin_f)
        -- vim.keymap.set({ "n", "x", "o" }, "F", ts_repeat_move.builtin_F)
        -- vim.keymap.set({ "n", "x", "o" }, "t", ts_repeat_move.builtin_t)
        -- vim.keymap.set({ "n", "x", "o" }, "T", ts_repeat_move.builtin_T)
      end,
    },
  },
  cmd = { "TSUpdateSync", "TSUpdate", "TSInstall" },
  -- local ts_repeat_move = require "nvim-treesitter.textobjects.repeatable_move"
  keys = {
    { "<c-space>", desc = "Increment selection" },
    { "<bs>",      desc = "Decrement selection", mode = "x" },

    -- -- Repeat movement with ; and ,
    -- -- ensure ; goes forward and , goes backward regardless of the last direction
    -- {{ "n", "x", "o" }, ";", ts_repeat_move.repeat_last_move_next, { desc = 'Repeat ; jump' }},
    -- {{ "n", "x", "o" }, ",", ts_repeat_move.repeat_last_move_previous, { desc = 'Repeat , jump' }},
    -- -- Optionally, make builtin f, F, t, T also repeatable with ; and ,
    -- {{ "n", "x", "o" }, "f", ts_repeat_move.builtin_f, { desc = 'Repeat last f' }},
    -- {{ "n", "x", "o" }, "F", ts_repeat_move.builtin_F, { desc = 'Repeat last F' }},
    -- {{ "n", "x", "o" }, "t", ts_repeat_move.builtin_t, { desc = 'Repeat last t' }},
    -- {{ "n", "x", "o" }, "T", ts_repeat_move.builtin_T, { desc = 'Repeat last T' }},
  },
  ---@type TSConfig
  ---@diagnostic disable-next-line: missing-fields
  opts = {
    highlight = { enable = true, additional_vim_regex_highlighting = false },
    indent = { enable = true },
    ensure_installed = {
      "bash",
      "c",
      "diff",
      "html",
      "javascript",
      "jsdoc",
      "json",
      "jsonc",
      "lua",
      "luadoc",
      "luap",
      "markdown",
      "markdown_inline",
      "python",
      "query",
      "regex",
      "toml",
      "tsx",
      -- "typescript",
      "vim",
      "vimdoc",
      "yaml",
    },
    incremental_selection = {
      enable = true,
      keymaps = {
        init_selection = "<C-space>",
        node_incremental = "<C-space>",
        scope_incremental = false,
        -- scope_incremental = "<cr>",
        node_decremental = "<bs>",
      },
    },
    textobjects = {
      select = {
        enable = true,
        lookahead = true, -- Automatically jump forward to textobj
        keymaps = {

          ["af"] = "@function.outer",
          ["if"] = "@function.inner",
          ["ac"] = "@class.outer",

          -- You can optionally set descriptions to the mappings (used in the
          -- desc parameter of nvim_buf_set_keymap) which plugins like
          -- which-key display

          ["ic"] = { query = "@class.inner", desc = "Select inner part of a class region" },
          -- You can also use captures from other query groups like `locals.scm`
          ["as"] = { query = "@scope", query_group = "locals", desc = "Select language scope" },
        },

        -- You can choose the select mode (default is charwise 'v')

        -- Can also be a function which gets passed a table with the keys *
        -- query_string: eg '@function.inner' * method: eg 'v' or 'o' and
        -- should return the mode ('v', 'V', or '<c-v>') or a table mapping
        -- query_strings to modes.

        selection_modes = {
          ['@parameter.outer'] = 'v', -- charwise
          ['@function.outer'] = 'V',  -- linewise
          ['@class.outer'] = '<c-v>', -- blockwise
        },

        -- If you set this to `true` (default is `false`) then any textobject
        -- is extended to include preceding or succeeding whitespace.
        -- Succeeding whitespace has priority in order to act similarly to eg
        -- the built-in `ap`.

        -- Can also be a function which gets passed a table with the keys *
        -- query_string: eg '@function.inner' * selection_mode: eg 'v' and
        -- should return true of false

        include_surrounding_whitespace = true,
      },

      move = {
        enable = true,
        set_jumps = true, -- whether to set jumps in the jumplist
        goto_next_start = {
          ["]m"] = "@function.outer",
          ["]]"] = { query = "@class.outer", desc = "Next class start" },
          ["]o"] = "@loop.*",
          -- ["]o"] = { query = { "@loop.inner", "@loop.outer" } }

          -- You can pass a query group to use query from
          -- `queries/<lang>/<query_group>.scm file in your runtime path.
          -- Below example nvim-treesitter's `locals.scm` and `folds.scm`.
          -- They also provide highlights.scm and indent.scm.

          ["]s"] = { query = "@scope", query_group = "locals", desc = "Next scope" },
          ["]z"] = { query = "@fold", query_group = "folds", desc = "Next fold" },
        },
        goto_next_end = {
          ["]M"] = "@function.outer",
          ["]["] = "@class.outer",
        },
        goto_previous_start = {
          ["[m"] = "@function.outer",
          ["[["] = "@class.outer",
        },
        goto_previous_end = {
          ["[M"] = "@function.outer",
          ["[]"] = "@class.outer",
        },

        -- Below will go to either the start or the end, whichever is closer.
        -- Use if you want more granular movements Make it even more gradual
        -- by adding multiple queries and regex.

        goto_next = {
          ["]d"] = "@conditional.outer",
        },
        goto_previous = {
          ["[d"] = "@conditional.outer",
        }
      },
    },
  },
  ---@param opts TSConfig
  config = function(_, opts)
    if type(opts.ensure_installed) == "table" then
      ---@type table<string, boolean>
      local added = {}
      opts.ensure_installed = vim.tbl_filter(function(lang)
        if added[lang] then
          return false
        end
        added[lang] = true
        return true
      end, opts.ensure_installed)
    end
    require("nvim-treesitter.configs").setup(opts)
  end,
}
